{"version":3,"sources":["components/StyledComponents.ts","components/ActivityPeriodDetails.tsx","components/ActivityPeriodList.tsx","components/UserActsModal.tsx","components/UserList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppHeader","styled","h2","Card","div","UserListContainer","UserCard","Modal","ModalToolbar","Button","button","ModalContainer","ActivityPeriodListContainer","ActivityPeriodDetailsContainer","ActivityPeriodCard","h4","Name","h3","Timezone","ActivityPeriodDetails","activity_period","start_time","split","end_time","MyCalendar","Calendar","ActivityPeriodList","activity_periods","timezone","useState","Date","date","setDate","activities","setActivities","useEffect","filtered_activity_periods","filter","_date","slice","join","moment","isSame","getDateActivities","value","onChange","Boolean","length","format","map","index","key","UserActsModal","user","closeModal","style","flex","real_name","onClick","tz","UserList","users","setUser","id","handleClickUser","App","setUsers","loader","setLoader","getUsers","axios","then","res","data","members","catch","error","console","log","finally","className","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4501bd8a.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const AppHeader = styled.h2``;\n\nconst Card = styled.div`\n  box-shadow: 0 0 5px 2px lightgray;\n  border-radius: 0.4em;\n`;\n\nexport const UserListContainer = styled.div`\n  height: 90vh;\n  overflow-y: scroll;\n`;\n\nexport const UserCard = styled(Card)`\n  padding: 1px;\n  margin: 20px;\n`;\n\nexport const Modal = styled.div`\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  background: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalToolbar = styled.div`\n  display: flex;\n  align-items: baseline;\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  background: #ff605c;\n  outline: none;\n  border: none;\n  border-radius: 50%;\n  color: white;\n  margin: 0 10px;\n\n  &:hover {\n    box-shadow: 0 0 5px 2px lightgray;\n  }\n`;\n\nexport const ModalContainer = styled.div`\n  width: 95%;\n  height: 95%;\n  background: rgba(255, 255, 255, 1);\n  margin: 20px auto;\n  position: relative;\n  border-radius: 0.2em;\n`;\n\nexport const ActivityPeriodListContainer = styled.div`\n  /* display: flex; */\n  flex-flow: row wrap;\n  justify-content: flex-start;\n  overflow-y: scroll;\n  height: 30vh;\n`;\n\nexport const ActivityPeriodDetailsContainer = styled(Card)`\n  padding: 2px;\n  margin: 10px;\n`;\nexport const ActivityPeriodCard = styled.h4``;\n\nexport const Name = styled.h3``;\n\nexport const Timezone = styled.h4``;\n","import React from \"react\";\nimport { IActivityPeriod } from \"../interfaces/IActivityPeriod\";\nimport {\n  ActivityPeriodDetailsContainer,\n  ActivityPeriodCard,\n} from \"./StyledComponents\";\n\ninterface IProps {\n  activity_period: IActivityPeriod;\n}\n\nconst ActivityPeriodDetails = ({ activity_period }: IProps) => {\n  return (\n    <ActivityPeriodDetailsContainer>\n      <ActivityPeriodCard>\n        {activity_period.start_time.split(\" \")[3]} -{\" \"}\n        {activity_period.end_time.split(\" \")[3]}\n      </ActivityPeriodCard>\n    </ActivityPeriodDetailsContainer>\n  );\n};\n\nexport default ActivityPeriodDetails;\n","import React, { useState, useEffect } from \"react\";\nimport { IActivityPeriod } from \"../interfaces/IActivityPeriod\";\nimport { ActivityPeriodListContainer, Timezone } from \"./StyledComponents\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport moment from \"moment\";\nimport ActivityPeriodDetails from \"./ActivityPeriodDetails\";\n\nimport styled from \"styled-components\";\n\nconst MyCalendar = styled(Calendar)`\n  margin: auto;\n`;\n\ninterface IProps {\n  activity_periods: IActivityPeriod[];\n  timezone: string;\n}\n\nconst ActivityPeriodList = ({ activity_periods, timezone }: IProps) => {\n  const [date, setDate] = useState<any>(new Date());\n  const [activities, setActivities] = useState<IActivityPeriod[]>([]);\n  useEffect(() => {\n    const getDateActivities = () => {\n      const filtered_activity_periods = activity_periods.filter(\n        (activity_period) => {\n          const _date = activity_period.start_time\n            .split(\" \")\n            .slice(0, 3)\n            .join(\" \");\n          const format = \"MMM D YYYY\";\n\n          return moment(date).isSame(moment(_date, format));\n        }\n      );\n      setActivities(filtered_activity_periods);\n    };\n    getDateActivities();\n  }, [activity_periods, date]);\n\n  return (\n    <>\n      <MyCalendar value={date} onChange={setDate} />\n      {Boolean(activities.length) ? (\n        <>\n          <h4>Activity periods for {moment(date).format(\"MMM D, YYYY\")}</h4>\n          <Timezone>Timezone: {timezone}</Timezone>\n          <ActivityPeriodListContainer>\n            {activities.map((activity_period, index) => (\n              <ActivityPeriodDetails\n                key={index}\n                activity_period={activity_period}\n              />\n            ))}\n          </ActivityPeriodListContainer>\n        </>\n      ) : (\n        <h3>No activities found for selected date.</h3>\n      )}\n    </>\n  );\n};\n\nexport default ActivityPeriodList;\n","import React from \"react\";\nimport {\n  ModalToolbar,\n  Button,\n  Modal,\n  ModalContainer,\n  Name,\n} from \"./StyledComponents\";\nimport { IUser } from \"../interfaces/IUser\";\nimport ActivityPeriodList from \"./ActivityPeriodList\";\n\ninterface IProps {\n  user: IUser;\n  closeModal: () => void;\n}\n\nconst UserActsModal = ({ user, closeModal }: IProps) => {\n  return (\n    <Modal>\n      <ModalContainer>\n        <ModalToolbar>\n          <Name style={{ flex: 1 }}>{user.real_name}</Name>\n          <Button onClick={closeModal} />\n        </ModalToolbar>\n        <ActivityPeriodList\n          activity_periods={user.activity_periods}\n          timezone={user.tz}\n        />\n      </ModalContainer>\n    </Modal>\n  );\n};\n\nexport default UserActsModal;\n","import React, { useState } from \"react\";\nimport { UserCard, Name, UserListContainer } from \"./StyledComponents\";\nimport UserActsModal from \"./UserActsModal\";\nimport { IUser } from \"../interfaces/IUser\";\n\ntype UserProps = {\n  users: IUser[];\n};\n\nconst UserList = ({ users }: UserProps) => {\n  const [user, setUser] = useState<IUser | null>(null);\n\n  const handleClickUser = (user: IUser) => {\n    setUser(user);\n  };\n\n  const handleCloseModal = () => {\n    setUser(null);\n  };\n\n  return (\n    <UserListContainer>\n      {users.map((user) => (\n        <UserCard key={user.id} onClick={() => handleClickUser(user)}>\n          <Name>{user.real_name}</Name>\n        </UserCard>\n      ))}\n      {user && <UserActsModal user={user} closeModal={handleCloseModal} />}\n    </UserListContainer>\n  );\n};\n\nexport default UserList;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport UserList from \"./components/UserList\";\nimport { AppHeader } from \"./components/StyledComponents\";\nimport axios from \"axios\";\n\nconst BASE_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8000/members\"\n    : \"db.json\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [loader, setLoader] = useState(false);\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  const getUsers = () => {\n    setLoader(true);\n    axios(`${BASE_URL}`)\n      .then((res) => {\n        setUsers(res.data.members);\n      })\n      .catch((error) => console.log(error))\n      .finally(() => {\n        setLoader(false);\n      });\n  };\n\n  if (loader) return <h2>loading...</h2>;\n  if (!users.length) return <h2>No users found</h2>;\n\n  return (\n    <div className=\"App\">\n      <AppHeader>Users</AppHeader>\n      <UserList users={users} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}